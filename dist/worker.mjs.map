{"version":3,"sources":["../src/worker.ts"],"sourcesContent":["import type { ShutdownManager } from \"./async-shutdown\";\nimport type { NormalizedThartOptions } from \"./types\";\n\nconst STARTUP_TIMEOUT_MS = 5000;\n\nexport async function startWorker(\n  options: NormalizedThartOptions,\n  manager: ShutdownManager,\n): Promise<void> {\n  if (!options.worker) throw new Error(\"Missing worker function\");\n  const workerId = process.env.WORKER_ID;\n  if (!workerId) throw new Error(\"Worker ID not set\");\n  const idx = Number.parseInt(workerId);\n  const workerConfig = options.worker[idx];\n\n  // if timeout is provided, then we fail to start if we do not start within the timout window\n  if (workerConfig.startupTimeoutMs) {\n    await Promise.race([\n      new Promise((_, reject) =>\n        setTimeout(\n          () => reject(new Error(\"Worker function timed out\")),\n          workerConfig.startupTimeoutMs,\n        ),\n      ),\n      workerConfig.start(idx),\n    ]);\n  } else await workerConfig.start(idx);\n\n  // after successful initialization, register the `stop` function to the listeners for this worker\n  if (workerConfig.stop) {\n    manager.addListener(workerConfig.stop);\n  }\n  // immediately kill this worker (shutdown will run if provided)\n  if (workerConfig.killAfterCompleted) {\n    await manager.killAfterCleanup();\n  }\n}\n"],"mappings":";AAKA,eAAsB,YACpB,SACA,SACe;AACf,MAAI,CAAC,QAAQ,OAAQ,OAAM,IAAI,MAAM,yBAAyB;AAC9D,QAAM,WAAW,QAAQ,IAAI;AAC7B,MAAI,CAAC,SAAU,OAAM,IAAI,MAAM,mBAAmB;AAClD,QAAM,MAAM,OAAO,SAAS,QAAQ;AACpC,QAAM,eAAe,QAAQ,OAAO,GAAG;AAGvC,MAAI,aAAa,kBAAkB;AACjC,UAAM,QAAQ,KAAK;AAAA,MACjB,IAAI;AAAA,QAAQ,CAAC,GAAG,WACd;AAAA,UACE,MAAM,OAAO,IAAI,MAAM,2BAA2B,CAAC;AAAA,UACnD,aAAa;AAAA,QACf;AAAA,MACF;AAAA,MACA,aAAa,MAAM,GAAG;AAAA,IACxB,CAAC;AAAA,EACH,MAAO,OAAM,aAAa,MAAM,GAAG;AAGnC,MAAI,aAAa,MAAM;AACrB,YAAQ,YAAY,aAAa,IAAI;AAAA,EACvC;AAEA,MAAI,aAAa,oBAAoB;AACnC,UAAM,QAAQ,iBAAiB;AAAA,EACjC;AACF;","names":[]}
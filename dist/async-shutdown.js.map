{"version":3,"sources":["../src/async-shutdown.ts"],"sourcesContent":["/**\n * This internal code is just about a carbon copy of: https://www.npmjs.com/package/async-cleanup\n * The license is ISC, found at: https://github.com/trevorr/async-cleanup/blob/master/LICENSE\n * Tests not included in this repository.\n */\nexport class ShutdownManager {\n  private cleanupListeners: Set<CleanupListener> | undefined;\n\n  // Listenable signals that terminate the process by default\n  private static readonly SIGNALS: NodeJS.Signals[] = [\n    \"SIGBREAK\", // Ctrl-Break on Windows\n    \"SIGHUP\", // Parent terminal closed\n    \"SIGINT\", // Terminal interrupt, usually by Ctrl-C\n    \"SIGTERM\", // Graceful termination\n    \"SIGUSR1\", // Used by Nodemon\n    \"SIGUSR2\", // Used by Nodemon\n  ];\n\n  constructor() {\n    this.installExitListeners();\n    this.cleanupListeners = new Set();\n  }\n\n  /**\n   * Adds a listener to be executed when the process is shutting down.\n   * @param listener - The listener to be executed when the process is shutting down.\n   * @throws If a listener is added after the process has started shutting down.\n   */\n  public addListener(listener: CleanupListener): void {\n    if (this.cleanupListeners === undefined) {\n      throw new Error(\"Cannot add cleanup listeners after cleanup\");\n    }\n    this.cleanupListeners.add(listener);\n  }\n\n  public async killAfterCleanup(signal?: NodeJS.Signals): Promise<void> {\n    await this.executeCleanupListeners();\n    process.kill(process.pid, signal);\n  }\n\n  private async exitAfterCleanup(code: number): Promise<void> {\n    await this.executeCleanupListeners();\n    process.exitCode = code;\n  }\n\n  private async executeCleanupListeners(): Promise<void> {\n    if (this.cleanupListeners === undefined) return;\n    this.uninstallExitListeners();\n    const listeners = this.cleanupListeners;\n    this.cleanupListeners = undefined;\n    const promises: Promise<void>[] = [];\n    for (const listener of listeners) {\n      try {\n        const promise = listener();\n        if (promise) promises.push(promise);\n      } catch (err) {\n        console.error(`Uncaught exception during cleanup ${err}`);\n      }\n    }\n    const results = await Promise.allSettled(promises);\n    for (const result of results) {\n      if (result.status === \"rejected\") {\n        console.error(`Unhandled rejection during cleanup ${result.reason}`);\n      }\n    }\n  }\n\n  private beforeExitListener = (code: number): void => {\n    console.debug(`Exiting with code ${code} due to empty event loop`);\n    void this.exitAfterCleanup(code);\n  };\n\n  private uncaughtExceptionListener = (error: Error): void => {\n    console.error(\"Exiting with code 1 due to uncaught exception\", error, \"\\n\");\n    void this.exitAfterCleanup(1);\n  };\n\n  private signalListener = (signal: NodeJS.Signals): void => {\n    console.debug(`Exiting due to signal ${signal}`);\n    void this.killAfterCleanup(signal);\n  };\n\n  private installExitListeners(): void {\n    process.on(\"beforeExit\", this.beforeExitListener);\n    process.on(\"uncaughtException\", this.uncaughtExceptionListener);\n    ShutdownManager.SIGNALS.forEach((signal) => {\n      process.on(signal, this.signalListener);\n    });\n  }\n\n  private uninstallExitListeners(): void {\n    process.removeListener(\"beforeExit\", this.beforeExitListener);\n    process.removeListener(\"uncaughtException\", this.uncaughtExceptionListener);\n    ShutdownManager.SIGNALS.forEach((signal) => {\n      process.removeListener(signal, this.signalListener);\n    });\n  }\n}\n\ntype CleanupListener = () => void | Promise<void>;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKO,IAAM,kBAAN,MAAM,iBAAgB;AAAA,EAa3B,cAAc;AAiDd,SAAQ,qBAAqB,CAAC,SAAuB;AACnD,cAAQ,MAAM,qBAAqB,IAAI,0BAA0B;AACjE,WAAK,KAAK,iBAAiB,IAAI;AAAA,IACjC;AAEA,SAAQ,4BAA4B,CAAC,UAAuB;AAC1D,cAAQ,MAAM,iDAAiD,OAAO,IAAI;AAC1E,WAAK,KAAK,iBAAiB,CAAC;AAAA,IAC9B;AAEA,SAAQ,iBAAiB,CAAC,WAAiC;AACzD,cAAQ,MAAM,yBAAyB,MAAM,EAAE;AAC/C,WAAK,KAAK,iBAAiB,MAAM;AAAA,IACnC;AA7DE,SAAK,qBAAqB;AAC1B,SAAK,mBAAmB,oBAAI,IAAI;AAAA,EAClC;AAAA,EAZA;AAAA;AAAA,SAAwB,UAA4B;AAAA,MAClD;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYO,YAAY,UAAiC;AAClD,QAAI,KAAK,qBAAqB,QAAW;AACvC,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AACA,SAAK,iBAAiB,IAAI,QAAQ;AAAA,EACpC;AAAA,EAEA,MAAa,iBAAiB,QAAwC;AACpE,UAAM,KAAK,wBAAwB;AACnC,YAAQ,KAAK,QAAQ,KAAK,MAAM;AAAA,EAClC;AAAA,EAEA,MAAc,iBAAiB,MAA6B;AAC1D,UAAM,KAAK,wBAAwB;AACnC,YAAQ,WAAW;AAAA,EACrB;AAAA,EAEA,MAAc,0BAAyC;AACrD,QAAI,KAAK,qBAAqB,OAAW;AACzC,SAAK,uBAAuB;AAC5B,UAAM,YAAY,KAAK;AACvB,SAAK,mBAAmB;AACxB,UAAM,WAA4B,CAAC;AACnC,eAAW,YAAY,WAAW;AAChC,UAAI;AACF,cAAM,UAAU,SAAS;AACzB,YAAI,QAAS,UAAS,KAAK,OAAO;AAAA,MACpC,SAAS,KAAK;AACZ,gBAAQ,MAAM,qCAAqC,GAAG,EAAE;AAAA,MAC1D;AAAA,IACF;AACA,UAAM,UAAU,MAAM,QAAQ,WAAW,QAAQ;AACjD,eAAW,UAAU,SAAS;AAC5B,UAAI,OAAO,WAAW,YAAY;AAChC,gBAAQ,MAAM,sCAAsC,OAAO,MAAM,EAAE;AAAA,MACrE;AAAA,IACF;AAAA,EACF;AAAA,EAiBQ,uBAA6B;AACnC,YAAQ,GAAG,cAAc,KAAK,kBAAkB;AAChD,YAAQ,GAAG,qBAAqB,KAAK,yBAAyB;AAC9D,qBAAgB,QAAQ,QAAQ,CAAC,WAAW;AAC1C,cAAQ,GAAG,QAAQ,KAAK,cAAc;AAAA,IACxC,CAAC;AAAA,EACH;AAAA,EAEQ,yBAA+B;AACrC,YAAQ,eAAe,cAAc,KAAK,kBAAkB;AAC5D,YAAQ,eAAe,qBAAqB,KAAK,yBAAyB;AAC1E,qBAAgB,QAAQ,QAAQ,CAAC,WAAW;AAC1C,cAAQ,eAAe,QAAQ,KAAK,cAAc;AAAA,IACpD,CAAC;AAAA,EACH;AACF;","names":[]}